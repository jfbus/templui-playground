// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
// Code generated by "templui-playground-generator"; DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/jfbus/templui/components/button"
	"github.com/jfbus/templui/components/checkbox"
	"github.com/jfbus/templui/components/icon"
	"github.com/jfbus/templui/components/input"
	"github.com/jfbus/templui/components/position"
	"github.com/jfbus/templui/components/selectfield"
	"github.com/jfbus/templui/components/selectfield/option"
	"github.com/jfbus/templui/components/size"
	"strconv"
)

func ButtonForm() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = input.C(input.D{
			Name:  "ID",
			Label: "ID",
			Value: "button",
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = selectfield.C(selectfield.D{
			Name:  "Type",
			Label: "Type",
			Options: []option.D{
				{
					Label: "Select a value",
				},
				{
					Label: "button.Button",
					Value: string(button.Button),
				},
				{
					Label: "button.Submit",
					Value: string(button.Submit),
				},
				{
					Label: "button.A",
					Value: string(button.A),
				},
			},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = input.C(input.D{
			Name:  "Label",
			Label: "Label",
			Value: "Label",
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = selectfield.C(selectfield.D{
			Name:  "Style",
			Label: "Style",
			Options: []option.D{
				{
					Label: "Select a value",
				},
				{
					Label: "button.StylePill",
					Value: strconv.Itoa(int(button.StylePill)),
				},
				{
					Label: "button.StyleAlternative",
					Value: strconv.Itoa(int(button.StyleAlternative)),
				},
				{
					Label: "button.StyleOutline",
					Value: strconv.Itoa(int(button.StyleOutline)),
				},
				{
					Label: "button.StyleNoBorder",
					Value: strconv.Itoa(int(button.StyleNoBorder)),
				},
				{
					Label: "button.StyleFullWidth",
					Value: strconv.Itoa(int(button.StyleFullWidth)),
				},
				{
					Label: "button.StyleHideLabelAlways",
					Value: strconv.Itoa(int(button.StyleHideLabelAlways)),
				},
				{
					Label: "button.StyleHideLabelSmall",
					Value: strconv.Itoa(int(button.StyleHideLabelSmall)),
				},
				{
					Label: "button.StyleHideLabelMedium",
					Value: strconv.Itoa(int(button.StyleHideLabelMedium)),
				},
			},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = selectfield.C(selectfield.D{
			Name:  "Size",
			Label: "Size",
			Options: []option.D{
				{
					Label: "Select a value",
				},
				{
					Label: "size.Normal",
					Value: strconv.Itoa(int(size.Normal)),
				},
				{
					Label: "size.XS",
					Value: strconv.Itoa(int(size.XS)),
				},
				{
					Label: "size.S",
					Value: strconv.Itoa(int(size.S)),
				},
				{
					Label: "size.L",
					Value: strconv.Itoa(int(size.L)),
				},
				{
					Label: "size.XL",
					Value: strconv.Itoa(int(size.XL)),
				},
			},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = selectfield.C(selectfield.D{
			Name:  "Icon",
			Label: "Icon",
			Options: []option.D{
				{
					Label: "Select a value",
				},
				{
					Label: "icon.Flower",
					Value: string(icon.Flower),
				},
			},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = selectfield.C(selectfield.D{
			Name:  "IconPosition",
			Label: "IconPosition",
			Options: []option.D{
				{
					Label: "Select a value",
				},
				{
					Label: "position.Start",
					Value: strconv.Itoa(int(position.Start)),
				},
				{
					Label: "position.End",
					Value: strconv.Itoa(int(position.End)),
				},
			},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = checkbox.C(checkbox.D{
			Name:  "Disabled",
			Label: "Disabled",
			Value: "true",
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = checkbox.C(checkbox.D{
			Name:  "Loader",
			Label: "Loader",
			Value: "true",
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func ButtonSection() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = ComponentViewer(Component{
			ID:      "Button",
			Package: "button",
			Form:    ButtonForm(),
			Preview: button.C(button.D{
				ID:    "button",
				Label: "Label",
			}),
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
